classdef GaussianDistributionContainerTest < matlab.unittest.TestCase
    methods (Test)
        %% Constructors
        function testThreeParameterConstructor(testCase)
            dim = 10;
            numDistributions = 2;

            prior = GaussianDistribution(zeros(dim, 1));
            obj = GaussianDistributionContainer(numDistributions, prior, true);

            testCase.verifyEqual(obj.Size, numDistributions);
            testCase.verifyEqual(obj.cols, true);

            for i = 1:obj.Size
                GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), ...
                    prior.mu, prior.cov, prior, prior.dim);
            end
        end



        %% Dependent properties
        function testDependentPropertiesColumnFormat(testCase)
            dim = 2;
            cols = true;
            numDistributions = 3;
            prior = GaussianDistribution(zeros(dim, 1), 5 * eye(dim));

            obj = GaussianDistributionContainer(numDistributions, prior, cols);

            % Size
            testCase.verifyEqual(obj.Size, numDistributions);

            % Setup
            %   standard normal
            %   mu = 1, cov: diag(2)
            %   mu = [1; 2], cov: newCov

            obj.updateDistributionParams(2, ones(dim, 1), 2);
            newCov = [10, 1; 1, 2];
            obj.updateDistributionParams(3, [1; 2], newCov);

            % Save value to workspace
            % assignin('base', 'objT', obj);

            % Expectation, ExpectationXXt, ExpectationXtX
            for i = 1:numDistributions
                testCase.verifyEqual(obj.Expectation{i}, obj.distributions(i).Expectation);
                testCase.verifyEqual(obj.ExpectationXXt{i}, obj.distributions(i).ExpectationXXt);
                testCase.verifyEqual(obj.ExpectationXtX{i}, obj.distributions(i).ExpectationXtX);
            end

            % ExpectationC, ExpectationCt, ExpectationCtC

            expectedVal = [obj.distributions(1).Expectation, obj.distributions(2).Expectation ...
                    obj.distributions(3).Expectation];

            testCase.verifyEqual(obj.ExpectationC, expectedVal);
            testCase.verifyEqual(obj.ExpectationCt, expectedVal');
            disp
            % testCase.verifyEqual(obj.ExpectationCtC, [[2, 0, 0]; [0, 6, 3]; [0, 3, 17]]);
        end

        function testDependentPropertiesRowFormat(testCase)
            dim = 2;
            cols = false;
            numDistributions = 3;

            obj = GaussianDistributionContainer(dim, cols, numDistributions);

            % Size
            testCase.verifyEqual(obj.Size, numDistributions);

            % Setup
            %   standard normal
            %   mu = 1, cov: diag(2)
            %   mu = [1; 2], cov: newCov

            obj.updateDistributionParams(2, ones(dim, 1), 2);
            newCov = [10, 1; 1, 2];
            obj.updateDistributionParams(3, [1; 2], newCov);

            % assignin('base', 'objT', obj);

            % Expectation, ExpectationXXt, ExpectationXtX
            for i = 1:numDistributions
                testCase.verifyEqual(obj.Expectation{i}, obj.distributions(i).Expectation);
                testCase.verifyEqual(obj.ExpectationXXt{i}, obj.distributions(i).ExpectationXXt);
                testCase.verifyEqual(obj.ExpectationXtX{i}, obj.distributions(i).ExpectationXtX);
            end

            % ExpectationC, ExpectationCt, ExpectationCtC

            expectedVal = [obj.distributions(1).Expectation'; obj.distributions(2).Expectation'; ...
                    obj.distributions(3).Expectation'];
            % else
            %     expectedVal = [obj.distributions(1).Expectation'; obj.distributions(2).Expectation'; ...
            %         obj.distributions(3).Expectation'];
                
            % end
            testCase.verifyEqual(obj.ExpectationC, expectedVal);
            testCase.verifyEqual(obj.ExpectationCt, expectedVal');
            testCase.verifyEqual(obj.ExpectationCtC, [[15, 4]; [4, 10]]);

            col1SqNorm = obj.getExpectationOfColumnNormSq();
            testCase.verifyEqual(col1SqNorm, [107 14]);
        end


        
        % [NOTE] Entropy properties are independent of the format col/row
        function testEntropyProperties(testCase)
            dim = 2;
            numDistributions = 2;

            % Covariance matrix for each of the components
            compCov = 2 * pi * eye(dim);
            prior = GaussianDistribution(ones(dim, 1), compCov);
            obj = GaussianDistributionContainer(numDistributions, prior, true);

            for i = 1:obj.Size
                testCase.verifyEqual(obj.H{i}, 1 + 2 * log(2*pi));
            end

            testCase.verifyEqual(obj.HC, numDistributions * (1 + 2 * log(2*pi)));
        end
        
        % [NOTE] PriorPrecision property is independent of the format col/row
        function testPriorPrecisionProperty(testCase)
            % Test 1: spherical covariance
            dim = 10;
            numDistributions = 2;

            prior = GaussianDistribution(zeros(dim, 1), 5 * eye(dim));
            obj = GaussianDistributionContainer(numDistributions, prior, true);
            
            testCase.verifyEqual(obj.PriorPrecision{1}, 1/5);

            % Test 2: diagonal covariance
            dim = 10;
            numDistributions = 2;

            precisions = [2, 2, 2, 2, 2, 4, 4, 4, 4, 4]';
            prior = GaussianDistribution(zeros(dim, 1), diag(precisions));
            obj = GaussianDistributionContainer(numDistributions, prior, true);
            
            for i = 1:numDistributions
                testCase.verifyEqual(obj.PriorPrecision{i}, 1./precisions);
            end
        end
        

        %% Update/retrieve methods
        function testGetDistribution(testCase)
            dim = 10;
            numDistributions = 2;

            prior = GaussianDistribution(zeros(dim, 1));
            obj = GaussianDistributionContainer(numDistributions, prior, true);

            idx = 1;
            % Update distribution on this index
            obj.updateDistributionMu(idx, 1:dim);

            dist = obj.getDistribution(idx);

            testCase.verifyEqual(dist.mu, (1:dim)');
        end

        function testUpdateDistribution(testCase)
            dim = 10;
            numDistributions = 2;

            prior = GaussianDistribution(zeros(dim, 1));
            obj = GaussianDistributionContainer(numDistributions, prior, true);

            covNew = Utility.generateRandomSPDMatrix(dim);
            newDist = GaussianDistribution(ones(dim, 1), covNew);

            idx = 2;
            obj.updateDistribution(idx, newDist);


            for i = 1:obj.Size
                if i ~= idx
                    GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), zeros(dim, 1), eye(dim), dim);
                else
                    GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), newDist.mu, newDist.cov, newDist.dim);
                end
            end
            
        end

        function testUpdateDistributionParams(testCase)
            dim = 10;
            numDistributions = 2;

            prior = GaussianDistribution(zeros(dim, 1));
            obj = GaussianDistributionContainer(numDistributions, prior, true);

            covNew = Utility.generateRandomSPDMatrix(dim);
            idx = 1;
            obj.updateDistributionParams(idx, ones(dim, 1), covNew);


            for i = 1:obj.Size
                if i ~= idx
                    GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), zeros(dim, 1), eye(dim), dim);
                else
                    GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), ones(dim, 1), covNew, dim);
                end
            end
            
        end
        
        function testUpdateDistributionMu(testCase)
            dim = 10;
            numDistributions = 2;
            prior = GaussianDistribution(zeros(dim,1));
            obj = GaussianDistributionContainer(numDistributions, prior, true);

            idx = 1;
            obj.updateDistributionMu(idx, 1:dim);

            for i = 1:obj.Size
                if i ~= idx
                    GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), zeros(dim, 1), eye(dim), dim);
                else
                    GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), (1:dim)', eye(dim), dim);
                end
            end
        end

        function testUpdateAllDistributionsCovariance(testCase)
            dim = 10;
            numDistributions = 2;

            prior = GaussianDistribution(zeros(dim, 1));
            obj = GaussianDistributionContainer(numDistributions, prior, true);

            newCov = Utility.generateRandomSPDMatrix(dim);
            obj.updateAllDistributionsCovariance(newCov);

            % Test that for each distribution value of 'mu' hasn't changed,
            % but the value of 'cov' is set to 'newCov'
            for i = 1:obj.Size
                GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), ...
                    obj.distributions(i).mu, newCov, dim);
            end
        end
    end
end
