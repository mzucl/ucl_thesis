classdef GaussianDistributionContainerTest < matlab.unittest.TestCase
    % methods (Static, Access = private)
    %     function verifyObject(testCase, obj, mu, cov, dim)
    %         if ~isempty(mu)
    %             testCase.verifyEqual(obj.mu, mu);
    %         end
    %         if ~isempty(cov)
    %             testCase.verifyEqual(obj.cov, cov);
    %         end
    %         testCase.verifyEqual(obj.dim, dim);
    %     end
    % 
    % end

    methods (Test)
        %% Constructors
        function testThreeParameterConstructor(testCase)
            dim = 10;
            numDistributions = 2;
            obj = GaussianDistributionContainer(dim, true, numDistributions);

            testCase.verifyEqual(obj.Size, numDistributions);
            testCase.verifyEqual(obj.cols, true);

            % Test that each distribution is a multivariate standard normal
            for i = 1:obj.Size
                GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), zeros(dim, 1), eye(dim), dim);
            end
        end

        function testFourParameterConstructor(testCase)
            dim = 10;
            numDistributions = 2;
            prec = 1:dim;

            obj = GaussianDistributionContainer(dim, false, numDistributions, prec);

            testCase.verifyEqual(obj.Size, numDistributions);
            testCase.verifyEqual(obj.cols, false);

            % Test that each distribution is a multivariate standard normal
            for i = 1:obj.Size
                GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), zeros(dim, 1), 1./prec(i) * eye(dim), dim);
            end
        end

        %  Size                % Number of distributions in the container
        % Expectation         % Under the assumption of independence of each component; 
        %                     % This is a cell array where each entry is an
        %                     % expectation of one component;
        % ExpectationXXt      % Similar to above, each entry is E[XXt]
        % ExpectationC        % 'C' stands for container, and this is expectation of the whole container
        % ExpectationCt 
        % ExpectationCtC
        % ExpectationXSqNorm  % This is a cell array where each entry is E[|component|^2]
        

        %% Dependent properties
        function testDependentProperties(testCase)
            dim = 2;
            numDistributions = 3;

            obj = GaussianDistributionContainer(dim, true, numDistributions);

            % Size
            testCase.verifyEqual(obj.Size, numDistributions);

            % Setup
            %   standard normal
            %   mu = 1, cov: diag(2)
            %   mu = [1; 2], cov: random(2, 2)

            obj.updateDistributionParams(2, ones(dim, 1), 2);
            newCov = Utility.generateRandomSPDMatrix(dim);
            obj.updateDistributionParams(3, [1; 2], newCov); 

            assignin('base', 'myVariable', obj);
        end

        

        %% Update/retrieve methods
        function testGetDistribution(testCase)
            dim = 10;
            numDistributions = 5;
            prec = 1:dim;

            obj = GaussianDistributionContainer(dim, false, numDistributions, prec);

            idx = 4;

            GaussianDistributionTest.verifyObject(testCase, obj.distributions(idx), zeros(dim, 1), 1/prec(idx) * eye(dim), dim);
        end

        function testUpdateDistribution(testCase)
            dim = 10;
            numDistributions = 5;

            obj = GaussianDistributionContainer(dim, false, numDistributions);

            covNew = Utility.generateRandomSPDMatrix(dim);
            newDist = GaussianDistribution(ones(dim, 1), covNew);

            idx = 3;
            obj.updateDistribution(idx, newDist);


            % Test that each distribution, except the updated one is a multivariate standard normal
            for i = 1:obj.Size
                if i ~= idx
                    GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), zeros(dim, 1), eye(dim), dim);
                else
                    GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), newDist.mu, newDist.cov, newDist.dim);
                end
            end
            
        end

        function testUpdateDistributionParams(testCase)
            dim = 10;
            numDistributions = 5;

            obj = GaussianDistributionContainer(dim, false, numDistributions);

            covNew = Utility.generateRandomSPDMatrix(dim);
            idx = 3;
            obj.updateDistributionParams(idx, ones(dim, 1), covNew);


            % Test that each distribution, except the updated one is a multivariate standard normal
            for i = 1:obj.Size
                if i ~= idx
                    GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), zeros(dim, 1), eye(dim), dim);
                else
                    GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), ones(dim, 1), covNew, dim);
                end
            end
            
        end
        
        function testUpdateDistributionMu(testCase)
            dim = 10;
            numDistributions = 5;

            obj = GaussianDistributionContainer(dim, false, numDistributions);

            idx = 3;
            obj.updateDistributionMu(idx, 1:dim);


            % Test that each distribution, except the updated one is a multivariate standard normal
            for i = 1:obj.Size
                if i ~= idx
                    GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), zeros(dim, 1), eye(dim), dim);
                else
                    GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), 1:dim, eye(dim), dim);
                end
            end
            
        end

        function testUpdateAllDistributionsCovariance(testCase)
            dim = 10;
            numDistributions = 5;

            obj = GaussianDistributionContainer(dim, false, numDistributions);

            newCov = Utility.generateRandomSPDMatrix(dim);
            obj.updateAllDistributionsCovariance(newCov);

            % Test that for each distribution value of 'mu' hasn't changed,
            % but the value of 'cov' is set to 'newCov'
            for i = 1:obj.Size
                GaussianDistributionTest.verifyObject(testCase, obj.distributions(i), obj.distributions(i).mu, newCov, dim);
            end
            
        end
    end
end
