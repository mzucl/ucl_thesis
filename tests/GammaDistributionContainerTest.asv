classdef GammaDistributionContainerTest < matlab.unittest.TestCase
    methods (Test)
        %% Constructor tests
        function testConstructorWithTwoParameters(testCase)
            % Test 1: 
            % a: scalar
            % b: scalar
            a = 1; b = 2;
            obj = GammaDistributionContainer(a, b);

            testCase.verifyEqual(obj.Size, 1); % Single element container
            for i = 1:obj.Size
                testCase.verifyTrue(isnan(obj.distributions(i).prior), 'All priors are not NaN');
            end

            % Test 2: 
            % a: scalar
            % b: array
            a = 1; b = [1, 2, 3, 4];
            obj = GammaDistributionContainer(a, b);

            testCase.verifyEqual(obj.Size, length(b));
            for i = 1:obj.Size
                GammaDistributionTest.verifyObject(testCase, obj.distributions(i), a, b(i), NaN);
            end

            % Test 3: 
            % a: array
            % b: scalar
            a = 1:10; b = 2;
            obj = GammaDistributionContainer(a, b);

            testCase.verifyEqual(obj.Size, length(a));
            for i = 1:obj.Size
                GammaDistributionTest.verifyObject(testCase, obj.distributions(i), a(i), b, NaN);
            end

            % Test 4: 
            % a: array
            % b: array
            a = 1:10; b = ones(10, 1);
            obj = GammaDistributionContainer(a, b);

            testCase.verifyEqual(obj.Size, length(a));
            for i = 1:obj.Size
                GammaDistributionTest.verifyObject(testCase, obj.distributions(i), a(i), b(i), NaN);
            end
        end

        function testConstructorWithThreeParameters(testCase)
            aPrior = 4; bPrior = 5;
            prior = GammaDistribution(aPrior, bPrior);

            % Test 1: 
            % a: scalar
            % b: scalar
            a = 1; b = 2;
            
            obj = GammaDistributionContainer(a, b, prior);

            testCase.verifyEqual(obj.Size, 1); % Single element container
            for i = 1:obj.Size
                GammaDistributionTest.verifyObject(testCase, obj.distributions(i), a, b, prior);
                GammaDistributionTest.verifyObject(testCase, obj.distributions(i).prior, aPrior, bPrior);
            end

            % Test 2: 
            % a: scalar
            % b: array
            a = 1; b = [1, 2, 3, 4];
            obj = GammaDistributionContainer(a, b, prior);

            testCase.verifyEqual(obj.Size, length(b));
            for i = 1:obj.Size
                GammaDistributionTest.verifyObject(testCase, obj.distributions(i), a, b(i), prior);
                GammaDistributionTest.verifyObject(testCase, obj.distributions(i).prior, aPrior, bPrior);
            end

            % Test 3: 
            % a: array
            % b: scalar
            a = 1:10; b = 2;
            obj = GammaDistributionContainer(a, b, prior);

            testCase.verifyEqual(obj.Size, length(a));
            for i = 1:obj.Size
                GammaDistributionTest.verifyObject(testCase, obj.distributions(i), a(i), b, prior);
                GammaDistributionTest.verifyObject(testCase, obj.distributions(i).prior, aPrior, bPrior);
            end

            % Test 4: 
            % a: array
            % b: array
            a = 1:10; b = ones(10, 1);
            obj = GammaDistributionContainer(a, b, prior);

            testCase.verifyEqual(obj.Size, length(a));
            for i = 1:obj.Size
                GammaDistributionTest.verifyObject(testCase, obj.distributions(i), a(i), b(i), prior);
                GammaDistributionTest.verifyObject(testCase, obj.distributions(i).prior, aPrior, bPrior);
            end
        end

        function testConstructorWithFourParameters(testCase)
            % Test 1: 'priors' set to NaN
            a = 1; b = 2; size = 10;
            obj = GammaDistributionContainer(a, b, NaN, size);

            testCase.verifyEqual(obj.Size, size);
            for i = 1:size
                testCase.verifyTrue(isnan(obj.distributions(i).prior), 'All priors are not NaN');
            end

            % Test 2: 'priors' is set
            aPrior = 5;
            bPrior = 2;
            prior = GammaDistribution(aPrior, bPrior);
            obj = GammaDistributionContainer(a, b, prior, 10);
            
            testCase.verifyEqual(obj.Size, size);
            for i = 1:obj.Size
                testCase.verifyEqual(obj.distributions(i).prior, prior);
            end
        end
        
        
        %% 



        function testDependentProperties(testCase)
            % Test 1
            a = 1; b = 2; size = 10;
            obj = GammaDistributionContainer(a, b, NaN, size);

            testCase.verifyEqual(obj.Size, size);
            
            for i = 1:size
                testCase.verifyEqual(obj.Expectation{i}, a / b);
            end

            % Test 2
            size = 5;
            bVals = ones(1, size);
            aVals = 1:size;
            
            obj = GammaDistributionContainer(aVals, bVals);
            for i = 1:size
                testCase.verifyEqual(obj.Expectation{i}, aVals(i) / bVals(i));
            end
            
            a = 1; b = 1;
            obj = GammaDistributionContainer(a, b, NaN, size);
            for i = 1:size
                testCase.verifyEqual(obj.H{i}, 1);
            end
            testCase.verifyEqual(obj.HC, obj.Size);


        end

        function testSingleDistributionMethods(testCase)
            bVals = ones(1, 5);
            aVals = 1:5;
            
            obj = GammaDistributionContainer(aVals, bVals);

            % 'getDistribution' method
            idx = 3;
            testCase.verifyEqual(obj.getDistribution(idx).a, idx);

            % 'updateDistributionParams' method
            deltaA = 0.1; deltaB = 0.01;
            obj.updateDistributionParams(idx, deltaA, deltaB);

            testCase.verifyEqual(obj.distributions(idx).a, aVals(idx) + deltaA);
            testCase.verifyEqual(obj.distributions(idx).b, bVals(idx) + deltaB);

            % 'updateDistributionParams' method with 'inc' = false
            obj.updateDistributionParams(idx, deltaA, deltaB, false);

            testCase.verifyEqual(obj.distributions(idx).a, deltaA);
            testCase.verifyEqual(obj.distributions(idx).b, deltaB);
            
            obj.updateAllDistributionsParams(aVals, bVals, false);

            for i = 1:obj.Size
                testCase.verifyEqual(obj.distributions(i).a, aVals(i));
                testCase.verifyEqual(obj.distributions(i).b, bVals(i));
            end
        end

        function testUpdateAllDistributionsParams(testCase)
            % Test 1: 
            % deltaA: scalar
            % deltaB: scalar
            % inc: true

            numOfDistr = 5;
            bVals = ones(1, numOfDistr);
            aVals = 1:numOfDistr;

            obj = GammaDistributionContainer(aVals, bVals);
    
            deltaA = 0.1; deltaB = 0.01;
            obj.updateAllDistributionsParams(deltaA, deltaB);

            % Add test for priors - update shouldn't affect priors
            for i = 1:obj.Size
                testCase.verifyTrue(isnan(obj.distributions(i).prior), 'All priors are not NaN');
                testCase.verifyEqual(obj.distributions(i).a, aVals(i) + deltaA);
                testCase.verifyEqual(obj.distributions(i).b, bVals(i) + deltaB);
            end

            % Test 2: 
            % deltaA: scalar
            % deltaB: scalar
            % inc: false
            obj = GammaDistributionContainer(aVals, bVals);
            obj.updateAllDistributionsParams(deltaA, deltaB, false);

            % Add test for priors - update shouldn't affect priors
            for i = 1:obj.Size
                testCase.verifyTrue(isnan(obj.distributions(i).prior), 'All priors are not NaN');
                testCase.verifyEqual(obj.distributions(i).a, deltaA);
                testCase.verifyEqual(obj.distributions(i).b, deltaB);
            end

            % Test 3: 
            % deltaA: array
            % deltaB: scalar
            % inc: true

            obj = GammaDistributionContainer(aVals, bVals);

            deltaA = 0.25 * 1:numOfDistr;
            obj.updateAllDistributionsParams(deltaA, deltaB);

            % Add test for priors - update shouldn't affect priors
            for i = 1:obj.Size
                testCase.verifyTrue(isnan(obj.distributions(i).prior), 'All priors are not NaN');
                testCase.verifyEqual(obj.distributions(i).a, aVals(i) + deltaA(i));
                testCase.verifyEqual(obj.distributions(i).b, bVals(i) + deltaB);
            end

            % Test 4: 
            % deltaA: array
            % deltaB: scalar
            % inc: false

            obj = GammaDistributionContainer(aVals, bVals);

            deltaA = 0.25 * 1:numOfDistr;
            obj.updateAllDistributionsParams(deltaA, deltaB, false);

            % Add test for priors - update shouldn't affect priors
            for i = 1:obj.Size
                testCase.verifyTrue(isnan(obj.distributions(i).prior), 'All priors are not NaN');
                testCase.verifyEqual(obj.distributions(i).a, deltaA(i));
                testCase.verifyEqual(obj.distributions(i).b, deltaB);
            end


            % Test 5: 
            % deltaA: scalar
            % deltaB: array
            % inc: true

            obj = GammaDistributionContainer(aVals, bVals);
            
            deltaA = 5;
            deltaB = 0.25 * 1:numOfDistr;
            obj.updateAllDistributionsParams(deltaA, deltaB);

            % Add test for priors - update shouldn't affect priors
            for i = 1:obj.Size
                testCase.verifyTrue(isnan(obj.distributions(i).prior), 'All priors are not NaN');
                testCase.verifyEqual(obj.distributions(i).a, aVals(i) + deltaA);
                testCase.verifyEqual(obj.distributions(i).b, bVals(i) + deltaB(i));
            end

            % Test 4: 
            % deltaA: scalar
            % deltaB: scalar
            % inc: false

            obj = GammaDistributionContainer(aVals, bVals);

            deltaA = 0.25 * 1:numOfDistr;
            obj.updateAllDistributionsParams(deltaA, deltaB, false);

            % Add test for priors - update shouldn't affect priors
            for i = 1:obj.Size
                testCase.verifyTrue(isnan(obj.distributions(i).prior), 'All priors are not NaN');
                testCase.verifyEqual(obj.distributions(i).a, deltaA(i));
                testCase.verifyEqual(obj.distributions(i).b, deltaB);
            end
        end
    end
end
