% TODO (medium): Write tests for methods in this file
% [NOTE] isnumeric and isscalar are different methods
% isnumeric checks if the variable is of a numeric type (even array).
% isscalar checks if the variable is a single element (1x1 array), regardless of its type.
%%

classdef Utility
    methods (Static)
        function res = isSingleNumber(x)
            res = isnumeric(x) && isscalar(x);
        end

        function res = isArray(x)
            res = ~isscalar(x) && ismatrix(x) && numel(size(x)) == 2 && (size(x, 1) == 1 || size(x, 2) == 1);
        end

        function res = isMatrix(x)
            res = ~isscalar(x) && ismatrix(x) && ~Utility.isArray(x);
        end

        % This will return true if the obj is NaN, a single instance of the
        % class, or an array of instances of a class
        function res = isNaNOrInstanceOf(obj, className)
            res = isnumeric(obj) && isnan(obj) || isa(obj, className) || ...
                Utility.areAllInstancesOf(obj, className);
        end

        % Built in 'isnan' doesn't work for instances of a class
        function res = isNaN(obj)
            res = isnumeric(obj) && isnan(obj);
        end

        % Used to compare obj1 and obj2 that can be NaN or instances of a
        % class
        function res = areEqual(obj1, obj2)
            if Utility.isNaN(obj1) && Utility.isNaN(obj2)
                res = true;
            elseif ~Utility.isNaN(obj1) && Utility.isNaN(obj2) || ...
                    Utility.isNaN(obj1) && ~Utility.isNaN(obj2)
                res = false;
            else 
                res = obj1 == obj2;
            end
        end

        % This will return true even if arr is just a single instance of
        % the class
        function res = areAllInstancesOf(arr, className)
            res = all(arrayfun(@(x) isa(x, className), arr));
        end

        function res = isSquareMatrix(matrix)
            [rows, cols] = size(matrix);
            res = (rows == cols);
        end

        function res = isSymmetricMatrix(matrix)
            res = Utility.isSquareMatrix(matrix) && isequal(matrix, matrix.');
        end

        function res = isPositiveDefinite(matrix)
            % Try to perform Cholesky decomposition
            try
                chol(matrix);
                res = true;
            catch e
                if strcmp(e.identifier, 'MATLAB:posdef')
                    res = false;
                else
                    rethrow(e);
                end
            end
        end

        function res = isSemiPositiveDefinite(matrix)
            if ~Utility.isSquareMatrix(matrix)
                error(['Error in class ' class(obj) ': Input must be a square matrix.']);
            end
  
            eigenvalues = eig(matrix);
            
            % Check if all eigenvalues are non-negative
            res = all(eigenvalues >= -1e-10);
        end

        function res = isValidCovarianceMatrix(matrix)
            res = Utility.isSymmetricMatrix(matrix) && Utility.isSemiPositiveDefinite(matrix);
        end

        function invA = matrixInverse(A)
            % Compute the inverse of matrix A using LU decomposition
            if ~Utility.isSquareMatrix(A)
                error(['Error in class ' class(obj) ': Matrix must be square for inversion.']);
            end
            
            % Compute the inverse using LU decomposition
            [L, U, P] = lu(A);
            invA = U \ (L \ P);
        end

        function result = ternary(cond, valTrue, valFalse)
            if cond
                result = valTrue;
            else
                result = valFalse;
            end
        end
        
        % Optimized version that doesn't evaluate the unnecessary value,
        % either 'valTrue' or 'valFalse'
        function result = ternaryOpt(cond, valTrueFunc(), valFalseFunc())
            if cond
                result = valTrue;
            else
                result = valFalse;
            end
        end


        @() ClassA()

        function A = generateRandomSPDMatrix(n)
            R = randn(n);

            A = R' * R;
        end

        function A = generateRandomIntMatrix(m, n)
            if nargin < 2 % Square matrix
                n = m;
            end
            
            minValue = 1;
            maxValue = 10;
            
            A = randi([minValue, maxValue], m, n);
        end
    end
end
